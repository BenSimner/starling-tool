/* Revised lclist-starling.cvf to fit more nicely with GRASShopper. */

shared int heap; 
shared int head;
shared int ub; // upper bound on the list

thread int lheap; // local copy of the heap  
thread int prev;
thread int curr;

thread int v;
thread int cv;
thread int val;

thread int _;

view isVal(int v, int node);
view isHead(int prev);
view false();
view isList(int v);
view has1Lock(int x, int y);
view has2Lock(int x, int y);
view dangleNode(int x);

method deleteVal(v) {
  {| isList(v) |}
    <prev = head>;
  {| isList(v) * isHead(prev) |} 
   <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, prev)); }>;
  {| isList(v) * has1Lock(prev, _) * isHead(prev) |}
   <lheap = heap>; curr = (%{ #2.next }(lheap, curr)); 
  {| isList(v) * has1Lock(prev, curr) * isHead(prev) |}
   <lheap = heap>; cv = (%{ #2.val }(lheap, curr)); 
  {| isList(v) * has1Lock(prev,curr) * isVal(cv, curr) |}
    while (cv < v ) {
      {| isList(v) * has1Lock(prev, curr) * isVal(cv, curr) |}
        <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, curr)); }>; 
      {| isList(v) * has2Lock(prev, curr) * isVal(cv, curr) |}
        <{ lheap = heap; heap = (%{ releaseLock(#2) }(lheap, prev)); }>;
      {| isList(v) * has1Lock(curr, _) * isVal(cv, curr) |}
        prev = curr;
      {| isList(v) * has1Lock(prev, _) * isVal(cv, prev) |}
        <lheap = heap>; curr = (%{ #2->next }(lheap, curr));  
      {| isList(v) * has1Lock(prev, curr) * isVal(cv, prev) |}
        <lheap = heap>; cv = (%{ #2.val }(lheap, curr)); 
      {| isList(v) * has1Lock(prev, curr) * isVal(cv, curr) |}
    }
  {| has1Lock(prev, curr) * isVal(cv, curr) |}
    if ( cv == v) {
      {| has1Lock(prev, curr) |}
        <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, curr)); }>; 
      {| has2Lock(prev, curr) |}
        <{ lheap = heap; heap = (%{ #2.next := #3 }(lheap, prev, curr)); }>;
      {| has1Lock(prev, _) * dangleNode(curr) |}
        <{ lheap = heap; heap = (%{ disposeNode(#2) }(lheap, curr)); }>; 
      {| has1Lock(prev, _) |}
    } else {
      {| has1Lock(prev, curr) |}
      ;
      {| has1Lock(prev, _) |}
    }
  {| has1Lock(prev, _) |}
    <{ lheap = heap; heap = (%{ releaseLock(#2) }(lheap, prev)); }>; 
  {| emp |}
}

constraint isHead(x) -> x == head;

constraint isList(v) ->
  %{ isListG(head,e,ub,#1) }(v);

constraint has1Lock(a,b) ->
  %{ has1LockG(head,#1,#2) }(a, b);

constraint has2Lock(a,b)  ->
  %{ has2Lock(head,#1,#2) }(a, b);

constraint dangleNode(a) -> 
  %{ dangleNodeG(head,#1) }(a);

constraint isVal(v, node) -> 
  %{ isValG(head, #1, #2) }(v, node);


// Are the constraints below necessary? 

// // Constraints on views
constraint has1Lock(a,b) * has1Lock(c,d)   -> a != c;
constraint has1Lock(a,b) * has2Lock(c,d)   -> a != c && a != d;
constraint has2Lock(a,b) * has2Lock(c,d)   -> a != c && a != d && b != c && b != d;
constraint has1Lock(a,b) * dangleNode(c)   -> a != c;
constraint has2Lock(a,b) * dangleNode(c)   -> a != c && b != c;

// // Could maybe replace some of the constraints above?
// constraint has2Lock(a,b) -> %{ has1Lock(#1,_) &*& has1Lock(#2,_) }(a, b);
