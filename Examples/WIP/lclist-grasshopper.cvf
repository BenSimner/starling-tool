/* Revised lclist-starling.cvf to fit more nicely with GRASShopper. */

shared int head;
thread int prev;
thread int curr;

thread int v;
thread int cv;
thread int val;

thread int _;

view isVal(int v, int node);
view isHead(int prev);
view false();
view isList();
view has1Lock(int x, int y);
view has2Lock(int x, int y);
view hasNode(int x);

method deleteVal( ) {
  {| isList() |}
    <prev = head>;
  {| isList() * isHead(prev) |}
    _ = %{ takeLock(#1) }(prev);
  {| has1Lock(prev, _) * isHead(prev) |}
    curr = %{ #1.next }(curr);
  {| has1Lock(prev, curr) * isHead(prev) |}
    cv = %{ #1.val }(curr);
  {| has1Lock(prev,curr) * isVal(cv, curr) |}
    while (cv < v) {
      {| has1Lock(prev, curr) * isVal(cv, curr) |}
        curr = %{ takeLock(#1) }(curr);
      {| has2Lock(prev, curr) * isVal(cv, curr) |}
        prev = %{ releaseLock(#1); }(prev);
      {| has1Lock(curr, _) * isVal(cv, curr) |}
        prev = curr;
      {| has1Lock(prev, _) * isVal(cv, prev) |}
        curr = %{ #1.next }(curr);
      {| has1Lock(prev, curr) * isVal(cv, prev) |}
        cv = %{ #1.val }(curr);
      {| has1Lock(prev, curr) * isVal(cv, curr) |}
    }
  {| has1Lock(prev, curr) * isVal(cv, curr) |}
    if ( cv == v) {
      {| has1Lock(prev, curr) |}
        curr = %{ #1.lock }(curr);
      {| has2Lock(prev, curr) |}
        _ = %{ #1.next := #2 }(prev, curr); 
      {| has1Lock(prev, _) * hasNode(curr) |}
        curr = %{ disposeNode(#1) }(curr);
      {| has1Lock(prev, _) |}
    } else {
      {| has1Lock(prev, curr) |}
      ;
      {| has1Lock(prev, _) |}
    }
  {| has1Lock(prev, _) |}
    _ = %{ releaseLock(#1) }(prev);
  {| isList() |}
}

constraint isHead(x) -> x == head;

constraint isList() ->
  %{ exists e: Node :: lseg(#1, e) &*& endNode(e) }(head);

constraint has1Lock(a,b) ->
  %{ exists e: Node :: 
            lseg(#1, #2)
             &*& nodeLocked(#2, #3)
             &*& lseg(#3, e)
             &*& endNode(e) }(head, a, b);

constraint has2Lock(a,b)  ->
  %{ exists c : Node, e : Node :: 
            lseg(#1, #2)
             &*& nodeLocked(#2, #3)
             &*& nodeLocked(#3, c)
             &*& lseg(c, e) &*& endNode(e) }(head, a, b);

constraint hasNode(a) -> %{ nodeLocked(#1) }(a);


// Constraints on views
constraint has1Lock(a,b) * has1Lock(c,d)   -> a != c;
constraint has1Lock(a,b) * has2Lock(c,d)   -> a != c && a != d;
constraint has2Lock(a,b) * has2Lock(c,d)   -> a != c && a != d && b != c && b != d;
constraint has1Lock(a,b) * hasNode(c)      -> a != c;
constraint has2Lock(a,b) * hasNode(c)      -> a != c && b != c;

// Could maybe replace some of the constraints above?
constraint has2Lock(a,b) -> %{ has1Lock(#1,_) &*& has1Lock(#2,_) }(a, b);

constraint isVal(v, node) -> %{ #2.val == #1 }(v, node);
