/* Revised lclist-starling.cvf to fit more nicely with GRASShopper. */

shared int heap; 
shared int head;
shared int ub; // upper bound on the list

thread int lheap; // local copy of the heap  
thread int prev;
thread int curr;

thread int v;
thread int cv;

thread int _;   // Does this give the right semantics? 

view isHead(int node); 
view isVal(int v, int node);
view isList(int v);
view has1Lock(int x, int y);
view has2Lock(int x, int y);
// view dangleNode(int x);

method deleteVal(v) {
  {| isList(v) |}
    <prev = head>;
  {| isList(v) * isHead(prev) |} 
   <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, prev)); }>;
  {| isList(v) * has1Lock(prev, _) |}
   <lheap = heap>; curr = (%{ #2.next }(lheap, curr)); 
  {| isList(v) * has1Lock(prev, curr) |}
   <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, curr)); }>;
  {| isList(v) * has2Lock(prev, curr) |}
   <lheap = heap>; cv = (%{ #2.val }(lheap, curr)); 
  {| isList(v) * has2Lock(prev,curr) * isVal(curr, cv) |}
    while (cv < v ) {
      {| isList(v) * has2Lock(prev, curr) * isVal(curr, cv) |}
        <{ lheap = heap; heap = (%{ releaseLock(#2) }(lheap, prev)); }>; 
      {| isList(v) * has1Lock(curr, _) * isVal(curr, cv) |}
        prev = curr;
        <lheap = heap>; curr = (%{ #2->next }(lheap, curr));  
      {| isList(v) * has1Lock(prev, curr) |}
        <{ lheap = heap; heap = (%{ takeLock(#2) }(lheap, curr)); }>; 
      {| isList(v) * has2Lock(prev, curr) |}
        <lheap = heap>; cv = (%{ #2.val }(lheap, curr)); 
      {| isList(v) * has1Lock(prev, curr) * isVal(curr,cv) |}
    }
  {| isList(v) * has2Lock(prev, curr) * isVal(curr, cv) |}
    if ( cv == v) {
      {| isList(v) * has2Lock(prev, curr) |}
        // Merged these two to avoid dangling nodes. 
        <{ lheap = heap; 
           heap = (%{ #2.next := #3.next }(lheap, prev, curr)); 
           lheap = heap; heap = (%{ disposeNode(#2) }(lheap, curr)); }>; 
      {| isList(v) * has1Lock(prev, _) |}
    } 
    else {
      {| has1Lock(prev, curr) |}
        <{ lheap = heap; heap = (%{ releaseLock(#1)}(curr)); }>; 
      {| has1Lock(prev, _) |}
    }
  {| has1Lock(prev, _) |}
    <{ lheap = heap; heap = (%{ releaseLock(#2) }(lheap, prev)); }>; 
  {| emp |}
}

constraint isHead(x) -> x == head;

constraint isList(v) -> %{ isListG(head,ub,#1) }(v);

constraint has1Lock(a,b) -> %{ has1LockG(head,#1,#2) }(a, b);

constraint has2Lock(a,b)  -> %{ has2LockG(head,#1,#2) }(a, b);

constraint isVal(node, v) -> %{ isValG(head, #1, #2) }(node, v);

// constraint dangleNode(a) -> 
//  %{ dangleNodeG(#1) }(a);


// Are the constraints below necessary? 

// Constraints on views
constraint has1Lock(a,b) * has1Lock(c,d)   -> a != c;
constraint has1Lock(a,b) * has2Lock(c,d)   -> a != c && a != d;
constraint has2Lock(a,b) * has2Lock(c,d)   -> a != c && a != d && b != c && b != d;
// constraint has1Lock(a,b) * dangleNode(c)   -> a != c;
// constraint has2Lock(a,b) * dangleNode(c)   -> a != c && b != c;

// // Could maybe replace some of the constraints above?
// constraint has2Lock(a,b) -> %{ has1Lock(#1,_) &*& has1Lock(#2,_) }(a, b);
