/*
 * Linux-style ticketed lock.
 * Adapted to allow several readers
 */

shared int ticket;  // The next ticket to hand out.
shared int serving; // The current ticket holding the lock.
shared int readCount; // Number of readers in the lock
thread int t;  // The thread's current ticket.
thread int s;  // The thread's current view of serving.
thread int r;  // The thread's current view of readCount.


method readAcquire() {
  {| emp |}
    <t = ticket++>;
  {| holdTick(t) |}
    do {
      {| holdTick(t) |}
        <s = serving>;
      {| if s == t then holdInnerLock() else holdTick(t) |}
    } while (s != t);
  {| holdInnerLock() |}
  //Proof should fail here as we currently restrict the 
  //views to forbid five readers, but the code does not respect this.
  <readCount++>;
  {| holdInnerLock() * holdReadLock() |}
  < serving ++ >;
  {| holdReadLock() |}
}

method readRelease() {
  {| holdReadLock() |}
  < readCount -- >;
  {| emp |}
}


method writeAcquire() {
  {| emp |}
    <t = ticket++>;
  {| holdTick(t) |}
    do {
      {| holdTick(t) |}
        <s = serving>;
      {| if s == t then holdInnerLock() else holdTick(t) |}
    } while (s != t);
  {| holdInnerLock() |}
   do {
     {| holdInnerLock() |}
     <r = readCount>;
	 {| if r == 0 then holdWriteLock() else holdInnerLock() |}
   } while (r != 0);
  {| holdWriteLock() |}
}


/*
 * Unlocks the ticket lock.
 */
method writeRelease() {
  {| holdWriteLock() |}
    <serving++>;
  {| emp |}
}


//Utility predicate
view Lift(bool b);
constraint Lift(b)                              -> b;


view holdTick(int t);
view holdInnerLock();
view holdWriteLock();
view holdReadLock();

// Invariant
constraint emp                                  -> ticket >= serving && readCount >= 0;

// Predicate definitions
constraint holdTick(t)                          -> ticket > t;
constraint holdInnerLock()                      -> ticket != serving;
constraint holdWriteLock()                      -> ticket != serving && readCount == 0;
constraint holdReadLock()                       -> readCount > 0;

// Interactions
constraint holdInnerLock()   * holdTick(t)      -> serving != t;
constraint holdWriteLock()   * holdTick(t)      -> serving != t;
constraint holdTick(ta)      * holdTick(tb)     -> ta != tb;
constraint holdInnerLock()   * holdInnerLock()  -> false;
constraint holdInnerLock()   * holdWriteLock()  -> false;
constraint holdWriteLock()   * holdWriteLock()  -> false;

//Only allow four readers for this example!
//This needs improving
constraint holdReadLock() * holdReadLock()      -> readCount > 1;
constraint holdReadLock() * holdReadLock() * holdReadLock() ->  readCount > 2; 
constraint holdReadLock() * holdReadLock() * holdReadLock() * holdReadLock() ->  readCount > 3; 
constraint holdReadLock() * holdReadLock() * holdReadLock() * holdReadLock() * holdReadLock() -> false; 

