/*
 * Linux-style ticketed lock.
 */

global int ticket;  // The next ticket to hand out.
global int serving; // The current ticket holding the lock.
local int t;  // The thread's current ticket.
local int s;  // The thread's current view of serving.

/*
 * Locks the ticket lock.
 */
method lock() {
  {| emp |}
    <t = ticket++>;
  {| holdTickLock(t, false) |}
    do {
      {| holdTickLock(t, false) |}
        <s = serving>;
      {| holdTickLock(t, s == t) |}
    } while (s != t);
  {| holdTickLock(t, true) |}
}

/*
 * Unlocks the ticket lock.
 */
method unlock() {
  {| holdTickLock(t, true) |}
    <serving++>;
  {| emp |}
}

view holdTickLock(int t, bool b);

// Invariant
constraint emp                         -> ticket >= serving;

// Predicate definitions
constraint holdTickLock(t, b)          -> ticket > t && (b == false || ticket != serving);

// Interactions
constraint holdTickLock(ta,ba) * holdTickLock(tb,bb) -> ta != tb  && (ba == false || bb == false) 
                                                           && (ba == false || serving != tb)
							   && (bb == false || serving != ta);




/* Comment
   /* Nested Comment */
 */