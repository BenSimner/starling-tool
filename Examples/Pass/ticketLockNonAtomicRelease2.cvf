/*
 * Linux-style ticketed lock.
 */

global int ticket;  // The next ticket to hand out.
global int serving; // The current ticket holding the lock.
local int t;  // The thread's current ticket.
local int s;  // The thread's current view of serving.

/*
 * Locks the ticket lock.
 */
method lock() {
  {| emp |}
    <t = ticket++>;
  {| holdTick(t) |}
    do {
      {| holdTick(t) |}
        <s = serving>;
      {| if s == t then holdLock() else holdTick(t) |}
    } while (s != t);
  {| holdLock() |}
}

/*
 * Unlocks the ticket lock.
 */
method unlock() {
  {| holdLock() |}
    <s = serving>;
  {| /*relLock(s)*/ holdLock() |}
    <serving = (s + 1)>;
  {| emp |}
}

view holdTick(int t);
view holdLock();
//view relLock(int s);

// Invariant
constraint emp                         -> true;

// Predicate definitions
constraint holdTick(t)                 -> ticket > t;
constraint holdLock()                  -> ticket > serving;
//constraint relLock(s)                   -> ticket > serving;

// Interactions
constraint holdLock()   * holdTick(t)  -> ticket > serving && ticket > t && serving != t;
//constraint relLock(s)   * holdTick(t)  -> ticket > serving && ticket > t && serving != t;
constraint holdTick(ta) * holdTick(tb) -> ta != tb;
constraint holdLock()   * holdLock()   -> false;
//constraint relLock(s)   * holdLock()   -> false;
//constraint relLock(sa)   * relLock(sb)   -> false;

